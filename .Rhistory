localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/DataManipulationRules.R", echo=TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE)
localA
localA$coefficients
localA$deviance
summary(localA)
summary(localA)@coefficients
localA$R
localA$formula
localA$coefficients
localA$residuals
summary(localA)$coefficients
## perform analysis ####
analyseTransmission<- function(inputdata,          #input data
rule,          #rule to determine whether sample is positive or negative
var.id,        #variables to determine apply rule to
estpars,       #parameters to estimate
method ="glm", #estimation method
preventError = FALSE, #remove those entries with FOI = 0 but cases>1
rhs = 1, #right hand side of formula
...){
#arrange data for analysis
data.arranged <- arrangeData(data = inputdata,
rule = rule,
var.id = var.id,
method = method,
...)
#remove those entries without susceptibles (contain no information and cause errors)
data.arranged <- data.arranged%>%filter(s>0)
#deal with potential error
if(preventError){data.arranged <- data.arranged%>%filter(i>0)}
#do analysis
#TO DO use covariates
fit <- switch(method,
glm = glm(cbind(cases, s - cases) ~ rhs ,
family = binomial(link = "cloglog"),
offset = log(i/n)*dt,
data = data.arranged),
mll =stop("mle: not implemented yet"),#deal with number of levels in a maximum likelihood estimation.
finalsize = FinalSize,#is not yet implemented as well
stop("no other methods than glm or maximum likelihood")
)
#return outcome
return(fit)
}
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE)
dataA
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE, covars = "Treatment")
dataA
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
as.formula(paste("cbind(cases, s - cases) ~ ", paste(covars, collapse= "+"))
)
as.formula(paste("cbind(cases, s - cases) ~ ", paste("treatment", collapse= "+")))
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
data.arranged
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
data.arranged
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
covariates
!is.null(covariates)
covariate.data
j
covariate.data
j
rdata
covariate <- rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(eval(parse(text = j)), na.rm = TRUE))%>%
ungroup
covariate
mean(eval(parse(text = j))
eval(parse(text = j)
j
parse(text = j)
eval(parse(text = j)
)
rdata
rdata%>%
group_by(across(c(mixinglevels ,"times")))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(treatment, na.rm = TRUE))%>%
ungroup
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(treatment, na.rm = TRUE))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
select(treatment)
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(treatment)
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(mean(treatment))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(mean(treatment),na.rm=T)
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(mean(treatment),na.rm=T)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
covariates
rdata
eval(parse(text = j)
)
rdata%>%
group_by(across(c(mixinglevels ,"times")))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(eval(parse(text = j)), na.rm = TRUE))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(treatment, na.rm = TRUE))
rdata%>%
group_by(across(c(mixinglevels ,"times"))) %>%
summarize(covar = mean(inoculationStatus, na.rm = TRUE))
rdata%>%
group_by(across(c(mixinglevels ,"times")))
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%id_host
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%host_id
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(host_id)
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(treatment)
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(mean(treatment))
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(treatment)
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(min(treatment))
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(max(treatment))
rdata%>%
group_by(across(c(mixinglevels ,"times")))%>%summarize(unique(treatment))
#run analysis over each data set
localA <- analyseTransmission(inputdata = dataA,
rule = rule.sinceany.cutoff,
var.id = c("sample_measure"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
localA
localB<- analyseTransmission(inputdata = dataB,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposnegmiss = c("+","-","NA"),
preventError = TRUE)
localB
localC<- analyseTransmission(inputdata = dataC,
rule = rule.sinceany.cutoff,
var.id = c("sample_result"),
method = "glm",
cutoff = 0,
preventError = TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
localB<- analyseTransmission(inputdata = dataB,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposnegmiss = c("+","-","NA"),
preventError = TRUE,
covars = "treatment")
localB<- analyseTransmission(inputdata = dataB,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposnegmiss = c("+","-","NA"),
preventError = TRUE,
covars = "treatment")
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
localB<- analyseTransmission(inputdata = dataB,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposnegmiss = c("+","-","NA"),
preventError = TRUE,
covars = "treatment")
localB
localC<- analyseTransmission(inputdata = dataC,
rule = rule.sinceany.cutoff,
var.id = c("sample_result"),
method = "glm",
cutoff = 0,
preventError = TRUE,
covars = "treatment")
localC
localB
localA
stud1 <- rnorm(100, 1,1)
stud2 <- rnorm(50, 1,1)
stud3 <- rnorm(5, -1,1)
stud4 <- rnorm(50, 1,1)
std.error<-function(v){sd(v)/sqrt(length(v))}
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","C"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = outputlocal$output,
subgroup = outputlocal$treat,
fixed = FALSE)
#print summary
#print summary
summary(metaout)
localA
list(localA,localB,localC)
list(localA,localB,localC)%>%summary
list(localA,localB,localC)%>%coefficients
list(localA,localB,localC)%>%unlist
tibble(localA,localB,localC)
lapply(list(localA,localB,localC), summary)
lapply(list(localA,localB,localC), function(x){summary(x)$coefficients})
#local output is a list of local outputs
#get the means and standard errors
lapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]})
unlist(lapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]}))
x<- unlist(lapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]}))
x[1,]
x[1]
x[2]
x[3]
lapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]})
#local output is a list of local outputs
#get the means and standard errors
sapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]})
#local output is a list of local outputs
#get the means and standard errors
vapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]})
#local output is a list of local outputs
#get the means and standard errors
lapply(list(localA,localB,localC), function(x){summary(x)$coefficients[,c(1,2)]})
estimates
#local output is a list of local outputs
local.output <- list(localA,localB,localC)
#get the means and standard errors
estimates <- lapply(local.output,
function(x){summary(x)$coefficients[,c(1,2)]})
estimates
length(estimates)
mapply(cbind(),estimates,c(1:length(estimates)) )
mapply(cbind,estimates,c(1:length(estimates)) )
t(estimates[1])
t(estimates[[1]])
#local output is a list of local outputs
local.output <- list(localB,localC)
#get the means and standard errors
estimates <- lapply(local.output,
function(x){summary(x)$coefficients[,c(1,2)]})
estimates <- mapply(cbind,estimates,c(1:length(estimates)) )
estimates
#get the means and standard errors
estimates <- lapply(local.output,
function(x){summary(x)$coefficients[,c(1,2)]})
estimates
estimates <- mapply(cbind,estimates,c(1:length(estimates)) )
estimates
#local output is a list of local outputs
local.output <- list(localA,
localB,
localC)
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(estimates))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]]$coefficients[,c(1,2)])
study = i))
}
#get subgroups
#to do
#simply only use the intercepts
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = outputlocal$output,
# subgroup = outputlocal$treat,
fixed = FALSE)
}
estimates = NULL;
for(i in c(1:length(estimates))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]]$coefficients[,c(1,2)]),
study = i))
}
for(i in c(1:length(estimates)))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]]$coefficients[,c(1,2)]),
study = i))
}
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/GlobalAlgorithm.R", echo=TRUE)
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(estimates)))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]]$coefficients[,c(1,2)]),
study = i))
}
i
estimates
estimates <- rbind(estimates,
cbind(summary(local.output[[i]]$coefficients[,c(1,2)]),
study = i))
cbind(summary(local.output[[i]]$coefficients[,c(1,2)]),
study = i)
summary(local.output[[i]]$coefficients[,c(1,2)])
local.output[[i]]
local.output[[i]]$coefficients
summary(local.output[[i]])$coefficients[,c(1,2)]
estimates = NULL;
for(i in c(1:length(estimates)))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i))
}
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i)
summary(local.output[[i]])$coefficients[,c(1,2)]
summary(local.output[[i]])$coefficients
local.output[[i]]
i
(i in c(1:length(estimates)))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i))
}
length(estimates)
#local output is a list of local outputs
local.output <- list(localA,
localB,
localC)
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(local.output)))
{
estimates <- rbind(estimates,
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i))
}
estimates
summary(local.output[[i]])$coefficients[,c(1,2)]
summary(local.output[[i]])$coefficients[,c(1,2)],
study = i)
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i)
rbind(estimates,
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i)
estimates
estimates
rbind(estimates,
cbind(summary(local.output[[i]])$coefficients[,c(1,2)],
study = i))
as.dataframe(summary(local.output[[i]])$coefficients[,c(1,2)])
as.data.frame(summary(local.output[[i]])$coefficients[,c(1,2)])
#local output is a list of local outputs
local.output <- list(localA,
localB,
localC)
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(local.output)))      {
estimates <- rbind(estimates,
cbind(data.frame(mean = summary(local.output[[i]])$coefficients[,1],
se  = summary(local.output[[i]])$coefficients[,2],),
study = i))
}
summary(local.output[[i]])$coefficients[,1]
cbind(data.frame(mean = summary(local.output[[i]])$coefficients[,1],
se  = summary(local.output[[i]])$coefficients[,2]),
study = i)
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(local.output)))      {
estimates <- rbind(estimates,
cbind(data.frame(mean = summary(local.output[[i]])$coefficients[,1],
se  = summary(local.output[[i]])$coefficients[,2]),
study = i))
}
estimates
row.names(estimates)
#get subgroups
#to do
#simply only use the intercepts
metaout<- metagen(TE =  estimates$mean,
seTE = estimates$se,
studlab = estimates$study,
#subgroup = outputlocal$treat,
fixed = FALSE)
metaout
#perform meta-analysis
metaana <- combine.estimates(list(localA,localB,localC))
#combine.estimates
combine.estimates <- function(local.output){
#get the means and standard errors
estimates = NULL;
for(i in c(1:length(local.output)))      {
estimates <- rbind(estimates,
cbind(data.frame(mean = summary(local.output[[i]])$coefficients[,1],
se  = summary(local.output[[i]])$coefficients[,2]),
study = i))
}
#get subgroups
#to do
#simply only use the intercepts
metaout<- metagen(TE =  estimates$mean,
seTE = estimates$se,
studlab = estimates$study,
#subgroup = outputlocal$treat,
fixed = FALSE)
return(metaout)
}
#perform meta-analysis
metaana <- combine.estimates(list(localA,localB,localC))
print(metaana)
plot(metaana)
forest.meta(metaana)
funnel.meta(metaana,studlab=TRUE,contour = c(0.9, 0.95, 0.99))
