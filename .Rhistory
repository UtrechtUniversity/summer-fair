#generic rule function
rule <- function(...){
decision = TRUE
return(decision)}
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule){
#get time sorted information per chick
dataUntidy <- list(ID = unique(data$chickid));
return(dataUntidy)
}
##########################################################
#                                                        #
#  Local algorithm estimation of transmission paramaters #
#                                                        #
#                                                        #
#                  Author:Egil A.J. Fischer              #
#                  Contact: e.a.j.fischer@uu.nl          #
#                  Creation date: 21-9-2021              #
##########################################################
## install and load packages ####
## First specify the packages of interest
packages = c("SPARQL",
"tidyverse"
"rstan",
"shinystan",
"rstanarm")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule){
#get time sorted information per chick
dataUntidy <- list(ID = unique(data$chickid));
return(dataUntidy)
}
#generic rule function
rule <- function(...){
decision = TRUE
return(decision)}
#extend generic rule function
rule.
#extend generic rule function
rule.1 <-function(data){
decision = TRUE
return(decision)
}
##test rules
applyRule(mockdata)
##########################################################
#
#                  Algorithm test code
#                  Simulation and testing of
#                  local and global algorithm
#
#                  Author: Egil A.J. Fischer                               #
#                  Contact: e.a.j.fischer@uu.nl
#                  Creation date: 7-Sept-2021
##########################################################
## If a package is installed, it will be loaded. If any
## are not, the missing package(s) will be installed
## from CRAN and then loaded.
## First specify the packages of interest
packages = c("ggplot2")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
source("LocalAlgorithm.R")
##create some mock data####
mockdata <- data.frame(
chickid = rep(c(1:20),each = 5),         # 20 animals
time = rep(c(1:5), 20),                  # 5 times
location = rep(c("A","B"),each = 50),     # 2 locations
type = rep(c(rep("I",25),rep("S",25)),2),# first 5 animals per group I
treatment = "none",                      # no treatment
sample1 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3)),               # random positive and negative samples
sample2 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3))               # random positive and negative samples
)
##visualize data ####
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample2)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
##test rules
applyRule(mockdata)
reshape2::acast(mockdata[mockdata$chickid==1,], .~time)
reshape2::acast(mockdata[mockdata$chickid==1,], .~time)
mockdata$chickid
mockdata[mockdata$chickid==1,]
reshape2::acast(mockdata[mockdata$chickid==1,], .~time)
reshape2::cast(mockdata[mockdata$chickid==1,], .~time)
reshape2::dcast(mockdata[mockdata$chickid==1,], .~time)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
aqm
library(reshape2
)
aqm <- melt(airquality, id=c("month", "day"), na.rm=TRUE)
airquality
aqm <- melt(airquality, id=c("Month", "Day"), na.rm=TRUE)
acast(aqm, Day ~ Month ~ variable)
reshape2::dcast(mockdata[mockdata$chickid==1,], .~time~variable)
reshape2::acast(mockdata[mockdata$chickid==1,], .~time~variable)
names(airquality)
acast(aqm, Month ~ variable, mean)
airquality
reshape2::acast(mockdata, .~time~variable)
reshape2::acast(mockdata, chickid~time~variable)
reshape2::acast(mockdata, chickid ~ time ~ variable)
acast(mockdata, chickid ~ time ~ variable)
acast(aqm, Day ~ Month ~ variable)
airquality
is.data.frame(airquality)
is.data.frame(mockdata)
acast(mockdata, chickid ~ time ~ variable)
mockdata
airquality
names(mockdata)
dcast(aqm, Month ~ variable, mean)
dcast(aqm, Day ~ Month ~ variable, mean)
acast(aqm, Day ~ Month ~ variable)
acast(mockdata, chickid ~ time ~ variable)
names(mockdata)
acast(mockdata, chickid ~ time ~ .)
acast(mockdata, chickid ~ time ~ sample2)
acast(mockdata, chickid ~ time ~ sample2)
acast(mockdata, chickid ~ time ~ variable)
acast(aqm, Day ~ Month ~ variable)
acast(mockdata, chickid ~ time ~ variable, value.var = names(mockdata))
acast(mockdata, chickid ~ time ~ ...)
acast(mockdata, chickid ~ ...)
mockdata
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function" #log-likelihood function
))
getClass("TransmissionEstimate")
# methods
setMethod("show", n = 10, likelihood = function(R){R*(1-R)})
new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
sapply(X = seq(0,2,by = 0.1), FUN =function(R){R*(1-R)})
plot(y =sapply(X = seq(0,2,by = 0.1), FUN =function(R){R*(1-R)}))
plot(x = seq(0,2,by = 0.1),y =sapply(X = seq(0,2,by = 0.1), FUN =function(R){R*(1-R)}))
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function" #log-likelihood function
))
getClass("TransmissionEstimate")
new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
# methods
setMethod("show",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
obj =new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
show(obj)
show(obj)
# methods
setMethod("show",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
# methods
setMethod("showy",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
# methods
setMethod("show",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function" #log-likelihood function
))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
# methods
setMethod("show",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
show(obj)
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function" #log-likelihood function
))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
# methods
setMethod("show",c("TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(n, likelihood){
print(n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =likelihood))
}
)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
plot(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1), FUN =object@likelihood))
}
)
show(obj)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))
}
)
show(obj)
## install and load packages ####
## First specify the packages of interest
packages = c("SPARQL",
"ggplot2",
"tidyverse",
"rstan",
"shinystan",
"rstanarm")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install.packages("tidyverse")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
uninstall.packages("tidyverse")
remove.packages("tidyverse")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("assertthat")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
install.packages("assertthat")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("httr")
install.packages("httr")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("readxl")
install.packages("readxl")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("cellranger")
install.packages("cellranger")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("xml2
")
install.packages("xml2")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
remove.packages("rstudionapi")
install.packages("rstudioapi")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function" #log-likelihood function
))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate", n = 10, likelihood = function(R){R*(1-R)})
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))
}
)
show(obj)
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+labs("R","LL")
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+labs("R","LL")
}
)
show(obj)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+labs("R","LL")
}
)
show(obj)
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+labs(c("R","LL"))
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+labs(c("R","LL"))
}
)
show(obj)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab("R")+ylab("LL"))
}
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab("R")+ylab("LL")
}
)
show(obj)
