ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab(object@pars[1])+ylab("LL")
}
)
show(obj)
print(object);
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab(object@pars[1])+ylab("LL")
}
)
show(obj)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@pars);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab(object@pars[1])+ylab("LL")
}
)
show(obj)
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function", #log-likelihood function with one or more parameters
rule = "string", #rule used to determine if sample is positive or negative
pars ="list" #list of estimated parameters options are of each the list contains the name and distribution
#R = reproduction number
#beta = transmission coefficient within a group
#betab = transmission coefficient between groups
#InfectiousPeriod = infectious period
#alpha = shape parameter distance dependent transmission
#r0 = scale parameter distance dependent transmission
))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate",
n = 10,
likelihood = function(R){R*(1-R)},
pars = c("R"))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate",
n = 10,
likelihood = function(R){R*(1-R)},
rule = "none",
pars = c("R"))
## The output of this algorithm should be an S4 object ####
# define the S4 class for output ###
setClass("TransmissionEstimate",
slots = c(n = "numeric", #number of observations
likelihood ="function", #log-likelihood function with one or more parameters
rule = "character", #rule used to determine if sample is positive or negative
pars ="list" #list of estimated parameters options are of each the list contains the name and distribution
#R = reproduction number
#beta = transmission coefficient within a group
#betab = transmission coefficient between groups
#InfectiousPeriod = infectious period
#alpha = shape parameter distance dependent transmission
#r0 = scale parameter distance dependent transmission
))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate",
n = 10,
likelihood = function(R){R*(1-R)},
rule = "none",
pars = c("R"))
getClass("TransmissionEstimate")
obj =new("TransmissionEstimate",
n = 10,
likelihood = function(R){R*(1-R)},
rule = "none",
pars = list("R"))
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@pars);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab(object@pars[1])+ylab("LL")
}
)
show(obj)
# methods
setMethod("show",signature= c(object ="TransmissionEstimate"),
function(object){
print(object@n);
print(object@rule);
print(object@pars);
ggplot(data =data.frame(x = seq(0,2,by = 0.1),
y = sapply(X = seq(0,2,by = 0.1),
FUN =object@likelihood))) +
geom_path(aes(x,y))+xlab(object@pars[1])+ylab("LL")
}
)
show(obj)
??melt
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule){
#get time sorted information per chick
dataUntidy <- list(ID = unique(data$chickid),
data = data);#select data for this chick
return(dataUntidy)
}
## First specify the packages of interest
packages = c("ggplot2")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
source("LocalAlgorithm.R")
##create some mock data####
mockdata <- data.frame(
chickid = rep(c(1:20),each = 5),         # 20 animals
time = rep(c(1:5), 20),                  # 5 times
location = rep(c("A","B"),each = 50),     # 2 locations
type = rep(c(rep("I",25),rep("S",25)),2),# first 5 animals per group I
treatment = "none",                      # no treatment
sample1 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3)),               # random positive and negative samples
sample2 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3))               # random positive and negative samples
)
##visualize data ####
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample2)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
##test rules
applyRule(mockdata)
##test rules
dataAfterRule <- applyRule(mockdata)
ggplot(data = dataAfterRule$data)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
rbinom(10,.1,1)
rbinom(10,1,.1)
test <- rbinom(10,1,.2)
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
rule.sincefirst <- function(timeseries){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
dataAfterRule <- applyRule(mockdata,rule.sincefirst)
dataAfterRule
ggplot(data = dataAfterRule$data)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
##test rules
rule.sincefirst <- function(timeseries,...){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
dataAfterRule <- applyRule(mockdata,rule.sincefirst)
mockdata
##create some mock data####
mockdata <- data.frame(
id = rep(c(1:20),each = 5),         # 20 animals
time = rep(c(1:5), 20),                  # 5 times
location = rep(c("A","B"),each = 50),     # 2 locations
type = rep(c(rep("I",25),rep("S",25)),2),# first 5 animals per group I
treatment = "none",                      # no treatment
sample1 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3)),               # random positive and negative samples
sample2 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3))               # random positive and negative samples
)
mockdata
mockdata[order(time),]
mockdata[order(mockdata$time),]
mockdata[order(mockdata$time)&&mockdata$id==1,]
mockdata[order(mockdata$time)&mockdata$id==1,]
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule){
#per chicken define the positive and negative moments
dataRuled <- data;
dataRuled$sir<- 0;#0 indicates susceptible individual
for(id in data$id){
dataRuled[order(dataRuled$time)&dataRuled$id == id,]$sir <-rule(dataRuled[order(dataRuled$time)&dataRuled$id == id,]$sample1,dataRuled[order(dataRuled$time)&dataRuled$id == id,]$sample2)
}
return(dataRuled)
}
##test rules
rule.sincefirst <- function(timeseries,...){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
dataAfterRule <- applyRule(mockdata,rule.sincefirst)
dataAfterRule
ggplot(data = dataAfterRule$data)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
ggplot(data = dataAfterRule$data)+
geom_raster(aes(x = time,y = id, fill = factor(sample1+sample2)))
dataAfterRule
ggplot(data = dataAfterRule$data)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
rule.sinceeither <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1+timeseries2))
return(new.series)
}
test <- rbinom(10,1,.2)
test
rule.sincefirst(test)
test1 <- rbinom(10,1,.2)
test1
rule.sincefirst(test1)
test1 <- rbinom(10,1,.2)
test1
test1 <- rbinom(10,1,.2)
test1
rule.sincefirst(test1)
test2 <- rbinom(10,1,.2)
test2
test1 +test2
rule.sinceeither(test1,test2)
rule.testinfectioustestrecovered <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1))+sign(cumsum(timeseries2))*2
return(new.series)
}
test1 <- rbinom(10,1,.2)
test1
rule.sincefirst(test1)
test2 <- rbinom(10,1,.2)
test2
test1 +test2
test1 +test2
rule.sinceeither(test1,test2)
rule.either(test1,test2)
rule.either <- function(timeseries1,timeseries2){
new.series <- sign(timeseries1+timeseries2)
return(new.series)
}
rule.testinfectioustestrecovered <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1))+sign(cumsum(timeseries2))*2
return(new.series)
}
rule.sinceeither(test1,test2)
rule.either(test1,test2)
rule.testinfectioustestrecovered(test1,test2)
rule.testinfectioustestrecovered <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1))+sign(cumsum(timeseries2))
return(new.series)
}
test1 <- rbinom(10,1,.2)
test1
rule.sincefirst(test1)
test2 <- rbinom(10,1,.2)
test2
test1 +test2
rule.sinceeither(test1,test2)
rule.either(test1,test2)
rule.testinfectioustestrecovered(test1,test2)
dataAfterRule <- applyRule(mockdata,rule.sinceeither)
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
dataAfterRule <- applyRule(mockdata,rule.sincefirst)
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
dataAfterRule <- applyRule(mockdata,rule.sinceeither)
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
dataAfterRule <- applyRule(mockdata,rule.either)
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
dataAfterRule <- applyRule(mockdata,rule.testinfectioustestrecovered())
dataAfterRule <- applyRule(mockdata,rule.testinfectioustestrecovered())
rule.testinfectioustestrecovered(test1,test2)
rule.testinfectioustestrecovered <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1))+sign(cumsum(timeseries2))
return(new.series)
}
dataAfterRule <- applyRule(mockdata,rule.testinfectioustestrecovered())
dataAfterRule <- applyRule(mockdata,rule.testinfectioustestrecovered)
ggplot(data = dataAfterRule)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.first))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.sincefirst))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.either))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.sinceeither))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.testinfectioustestrecovered))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
ggplot(data = applyRule(mockdata,
rule.testinfectioustestrecovered))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
mockdata[order(mockdata$time)&mockdata$id == id,]
mockdata[order(mockdata$time)&mockdata$id == 1,]
mockdata[order(mockdata$time)&mockdata$id == 1,c("sample1","sample2")]
##create some rules
rule.generic <-function(timeseries,var.id,...){
print("generic rule returns first column");
return(timeseries[var.id[1],])
}
applyRule(mockdata,
rule.generic)
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule, time.series.id){
#per chicken define the positive and negative moments
dataRuled <- data;
dataRuled$sir<- 0;#0 indicates susceptible individual
for(id in data$id){
dataRuled[order(dataRuled$time)&dataRuled$id == id,]$sir <-rule(dataRuled[order(dataRuled$time)&dataRuled$id == id,],time.series.id)
}
return(dataRuled)
}
names(mockdata)
tail(names(mockdata),2)
applyRule(mockdata,
rule.generic,
tail(names(mockdata),2))
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R")
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
applyRule(mockdata,
rule.generic,
tail(names(mockdata),2))
dataRuled[order(dataRuled$time)&dataRuled$id == id,]$sir
time.series.id
rule(dataRuled[order(dataRuled$time)&dataRuled$id == id,],time.series.id)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
source("LocalAlgorithm.R")
##create some mock data####
mockdata <- data.frame(
id = rep(c(1:20),each = 5),         # 20 animals
time = rep(c(1:5), 20),                  # 5 times
location = rep(c("A","B"),each = 50),     # 2 locations
type = rep(c(rep("I",25),rep("S",25)),2),# first 5 animals per group I
treatment = "none",                      # no treatment
sample1 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3)),               # random positive and negative samples
sample2 = c(rbinom(25,1,.7),rbinom(25,1,.3),
rbinom(25,1,.7),rbinom(25,1,0.3))               # random positive and negative samples
)
##visualize data ####
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample2)))
ggplot(data = mockdata)+
geom_raster(aes(x = time,y = chickid, fill = factor(sample1+sample2)))
##create some rules
rule.generic <-function(timeseries,var.id,...){
print("generic rule returns first column");
return(timeseries[var.id[1],])
}
rule.sincefirst <- function(timeseries,...){
new.series <- sign(cumsum(timeseries))
return(new.series)
}
rule.sinceeither <- function(timeseries1,timeseries2,...){
new.series <- sign(cumsum(timeseries1+timeseries2))
return(new.series)
}
rule.either <- function(timeseries1,timeseries2,...){
new.series <- sign(timeseries1+timeseries2)
return(new.series)
}
rule.testinfectioustestrecovered <- function(timeseries1,timeseries2){
new.series <- sign(cumsum(timeseries1))+sign(cumsum(timeseries2))
return(new.series)
}
applyRule(mockdata,
rule.generic,
tail(names(mockdata),2))
source("src/LocalAlgorithm.R")
source("src/R/LocalAlgorithm.R")
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
timeseries
timeseries[var.id[1],]
timeseries[,var.id[1]]
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R")
test <- applyRule(mockdata,
rule.generic,
tail(names(mockdata),2))
test
rule.sincefirst <- function(timeseries,var.id,...){
If(length(var.id)>1) warning("Only first var.id entry used in rule")
new.series <- sign(cumsum(timeseries[,var.id[1]]))
return(new.series)
}
rule.sincefirst <- function(timeseries,var.id,...){
if(length(var.id)>1) warning("Only first var.id entry used in rule")
new.series <- sign(cumsum(timeseries[,var.id[1]]))
return(new.series)
}
mockdata[1:10]
mockdata[1:10,]
mockdata[1:10,c("sample1","sample2")]
sum(mockdata[1:10,c("sample1","sample2")])
mockdata[1:10,c("sample1","sample2")]%>%sum
rowsum(mockdata[1:10,c("sample1","sample2")])
rowSum(mockdata[1:10,c("sample1","sample2")])
rowSums(mockdata[1:10,c("sample1","sample2")])
rule.sinceeither <- function(timeseries,var.id,...){
rule.sinceeither <- function(timeseries,var.id,...){
new.series <- sign(cumsum(rowSums(timeseries[,var.id])));
return(new.series)
}
tail(names(mockdata),2)
rowSums(mockdata[1:10,c("sample1","sample2")])
tail(names(mockdata),2)
ggplot(data = applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2)
))+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2)
)
applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2))
)
applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2))
applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2))
new.series <- sign(cumsum(rowSums(timeseries[,var.id])));
rule.sinceeither <- function(timeseries,var.id,...){
new.series <- sign(cumsum(rowSums(timeseries[,var.id])));
return(new.series)
}
ggplot(data = applyRule(mockdata,
rule.sinceeither,
tail(names(mockdata),2))
)+
geom_raster(aes(x = time,y = id, fill = factor(sir)))
rule.either <- function(timeseries1,timeseries2,...){
new.series <- sign(rowSums(timeseries[,var.id]));
return(new.series)
}
