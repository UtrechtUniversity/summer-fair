data
##create a numeric time ####
setTimes<- function(input,       #data set
resolution, #return time at this resolution allowed is second, minute, hour, day, week, month, year
decimals = 1){
timevars <- c("ex_sec","ex_min","ex_hour","ex_day","ex_week","ex_year");
timevarsininput<-timevars[timevars%in%names(input)]
times <-  NA;
multiplicationfactor <- c(ex_sec = 1,
ex_min = 60,
ex_hour= 60*60,
ex_day = 60*60*24,
ex_week = 60*60*24*7,
ex_year = 60*60*24*365);
#ugly code but does the job of setting it to seconds
for(t in timevars[timevars%in%names(input)])  {
times <- as.vector(ifelse(is.na(times),
input[,t]*multiplicationfactor[t],
times+input[,t]*multiplicationfactor[t]))
}; times<- unlist(times)
#round off to one decimal given the resolution
return((times/ multiplicationfactor[paste0("ex_",resolution)])%>%round(decimals))
}
setTimes(data,
resolution = "day",
decimals =1)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
#set times
usedata$times <- setTimes(data,
resolution = "day",
decimals =1)
usedata$times
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
#set times
usedata$times <- setTimes(data,
resolution = "day",
decimals =1)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
usedata$times
setTimes(data,
resolution = "day",
decimals =1)
#set times
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
usedata$times
setTimes(usedata,
resolution = "day",
decimals =1)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
input
times
times
is.na(times)
input[,t]
t
timevars
timevars %in% input
names(input)
## preprocess data ####
#remove redundant space
names(usedata)<- str_trim(names(usedata))
#set times
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
times
## preprocess data ####
#remove redundant space
names(usedata)<- str_trim(names(usedata))
#set times
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
#set times
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
#for testing add some columns
usedata$sample_result2 <- usedata$sample_result
usedata$sample_resultsave <- usedata$sample_result
names(usedata)
#replace values to 0 = negative, 1 = positive
head(usedata)
id.vars <- c("sample_result")
## visualize data after applying rules ####
head(applyRule(usedata,
rule.sinceany.recode,
id.vars)%>%arrange(host_id), 2* sampletimes)
usedata
#replace values to 0 = negative, 1 = positive
head(usedata)
### function apply a rule to the data to determine status of a sample ####
# status of a sample is determined by the own value and all other values of that chicken
# status of a sample can be determined by one value or multiple inputs
applyRule <- function(data,rule,var.id, ...){
#set new data set arranged by times
dataRuled <- data%>%arrange(times);
sir<- NULL;#0 indicates susceptible individual
for(cid in unique(dataRuled$host_id)){
dataRuled[dataRuled$host_id ==cid,"sir"] <-  dataRuled%>%
filter(host_id == cid)%>%   #subset the particular individual
arrange(times)%>%       #arrange samples by time
rule(var.id,...)         #apply rule to determine infection status (0 = susceptible, 1= latent, 2 = infectious, 3 = recovered)
}
return(dataRuled)
}
## visualize data after applying rules ####
head(applyRule(usedata,
rule.sinceany.recode,
id.vars)%>%arrange(host_id), 2* sampletimes)
ggplot(data = applyRule(usedata,
rule.sincefirst,
tail(names(usedata),3)))+
geom_raster(aes(x = times,y = id, fill = factor(sir)))
ggplot(data = applyRule(usedata,
rule.sincefirst,
tail(names(usedata),3)))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
ggplot(data = applyRule(usedata,
rule.any,
var.id = tail(names(usedata),2)))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
usedata
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3)))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/DataManipulationRules.R")
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/DataManipulationRules.R", echo=TRUE)
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3),
codesposneg = c("+","-"))
names(applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3),
codesposneg = c("+","-")))
applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3),
codesposneg = c("+","-"))$sir
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/DataManipulationRules.R", echo=TRUE)
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
tail(names(usedata),3),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
recodefunction
timeseries
timeseries[,var.id]
timeseries
var.id
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
c("sample_record")),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
applyRule(usedata,
rule.sinceany.recode,
c("sample_record"))
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
c("sample_record"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
usedata
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(.~group)
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(.~group)
ggplot(data = applyRule(usedata,
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~.)
usedata
usedata%>%select(treatment == "control")
usedata
usedata[usedata$treatment == "control",]
usedata$treatment
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control",],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~.)
usedata[str_trim(usedata$treatment) == "control"
,]
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control",],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
usedata$host_id
unique(usedata$host_id)
length(unique(usedata$host_id))
length(unique(usedata[str_trim(usedata$treatment)=="control",]$host_id))
length(unique(usedata[str_trim(usedata$treatment)=="control",]$host_id))
(unique(usedata[str_trim(usedata$treatment)=="control",]$host_id)
unique(usedata[str_trim(usedata$treatment)=="control",]$host_id)
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& str_detect(usedata$treatment,"Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~.)
usedata[str_trim(usedata$treatment) == "control"
& str_detect(usedata$treatment,"Ro"),]
usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$treatment,pattern ="Ro"),]
grepl(usedata$host_id,pattern ="Ro"),]
grepl(usedata$host_id,pattern ="Ro")
usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),]
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~.)
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(.~group)
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~.)
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(.~group, scales = "free_y")
ggplot(data = applyRule(usedata[str_trim(usedata$treatment) == "control"
& grepl(usedata$host_id,pattern ="Ro"),],
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-")))+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
applyRule(usedata,
rule.sinceany.recode,
id.vars)
## visualize data after applying rules ####
applyRule(usedata,
rule.sinceany.recode,
c("sample_result"),
codesposneg = c("+","-"))
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "year",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "min",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
datawithrule
datawithrule$times
max(datawithrule$times)
min(datawithrule$times)
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "hour",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
datawithrule$sir
datawithrule[,c("sir","times")]
plot(datawithrule[,c("sir","times")])
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))+
facet_grid(group~., scales = "free_y")
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "year",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
#set times to the correct resolution ###
usedata$times <- setTimes(usedata,
resolution = "day",
decimals =1)
## apply rule to this data set ####
datawithrule <-applyRule(usedata,   #data
rule.sinceany.recode,     #rule to apply
c("sample_result"),       #variables with output of tests
codesposneg = c("+","-")) #specific parameters for this rule. Here we need to recode values containing + or - to 1, 0 or NA.
## visualize data after applying rules ####
ggplot(data = datawithrule)+
geom_raster(aes(x = times,y = host_id, fill = factor(sir)))
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
id.vars = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
data.arranged
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
data.arranged
##arrange input for specific method####
arrangeData <- function(data,
rule,
id.vars,
method = "glm",
...){
return(eval(parse(text = paste0("arrangeData.", method)))(applyRule(data,rule,...)))
}
arrangeData.glm<-function(rdata){
#for a standard glm approach requires
group.data <- NULL;
#1. time intervals (length)
group.data$times <- rdata%>%
group_by(group,times) %>%
summarize(mean(times))
group.data$dt <-data.frame(group.data)%>%
group_by(times.group)%>%
summarize(dt = c(-1,tail(times.mean.times.,-1)-head(times.mean.times.,-1)))
#clean up
group.data <- data.frame(group.data)[,c("times.group","times.mean.times.","dt.dt")];
names(group.data)<- c("group","times","dt");
#2. cases per interval
indiv.cases <- rdata%>%
arrange(times)%>%
group_by(host_id) %>%
summarize(
group = group,
times = times,
case = c(0,as.numeric(head(sir,-1)==0 & tail(sir,-1)>0)));
cases   <- indiv.cases%>%
group_by(group,times) %>%
summarise(sum(case,na.rm = TRUE))
group.data$cases<- data.frame(cases)[,-1]
#3. number of infectious individual at start interval
i <- rdata%>%
group_by(group,times) %>%
summarise(sum(sir == 2,na.rm = TRUE))
group.data$i <- data.frame(i)[,-1]
#4. number of susceptible individuals at start interval
s <- rdata%>%
group_by(group,times) %>%
summarise(sum(sir == 0,na.rm = TRUE))
group.data$s <- data.frame(s)[,-1]
#5. number of recovered individuals at start of interval
r <- rdata%>%
group_by(group,times) %>%
summarise(sum(sir == 3,na.rm = TRUE))
group.data$r <- data.frame(r)[,-1]
#6. covariates of the group
return(group.data)
}
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
data.arranged
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
cases
group.data$cases
head(group.data)
data.frame(cases)[,-1]
head(data.frame(cases)[,-1])
head(data.frame(cases))
head(data.frame(cases[,1]))
head(data.frame(cases[,2]))
head(data.frame(cases[,3]))
head(data.frame(cases[,-1]))
head(data.frame(cases[,-2]))
ncol(cases)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
debugSource("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
group.data
group.data$cases
group.data
names(group.data)
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/LocalAlgorithm.R", echo=TRUE)
##arrange data for analysis ####
data.arranged <- arrangeData(data = datawithrule,
rule = rule.sinceany.recode,
var.id = c("sample_result"),
method = "glm",
codesposneg = c("+","-"))
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/R/AlgorithmsTest.R", echo=TRUE)
head(data.arranged)
