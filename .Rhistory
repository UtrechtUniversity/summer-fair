mu = 8; sigma =1.5;a  = 5; b = 11; n = 100;
test.data <- data.frame(
count = c(rtruncnorm(n, a,b, mu, sigma)),
censored = 0
)
test.data$censored<- as.numeric(test.data$count<= a)
test.data$censored<- as.numeric(test.data$count>= b)
hist(test.data$count)
mean(test.data$count)
sd(test.data$count)
#find mu and sigma
x <- countdistribution.normal(test.data)
x
imum likelihood estimation
countdist
#function to estimate the normal distribution of log-transformed count data
#uses maximum likelihood estimation
countdistribution.normal <- function(data){
#create a function to optimize
est.fun<- function(mu, sigma){
#probability of uncensored data (variable censored = 0)
a <- data%>%
filter(censored == 0)%>%
select(count)%>%
unlist%>%
dnorm(mean = mu, sd = sigma)%>%
prod
#probability of left censored data (variable censored = -1)
b <- data%>%
filter(censored == -1)%>%
select(count)%>%
unlist%>%
pnorm(mean =  mu, sd = sigma,lower.tail = TRUE)%>%
prod
#probability of right censored data (variable censored = 1)
c <- data%>%
filter(censored == 1)%>%
select(count)%>%
unlist%>%
pnorm(mean =  mu, sd =  sigma,lower.tail = FALSE)%>%
prod
#return the -loglikelihood
return(-log(a*b*c))
}
#use mean and sd of uncensored as best fit
init.mean = mean(data$count);
init.sd = sd(data$count);
#find optimal values of mu and sigma
return(mle2(est.fun,
start = list(mu = init.mean,
sigma = init.sd)
,method = "Nelder-Mead"
))
}
#truncated normal distribution to get test data
rtruncnorm <- function(n, a = -Inf,b = Inf, mean =0, sd =1){
vec <- rnorm(n,mean,sd);
vec[vec<=a]<- a
vec[vec>=b]<- b
return(vec)
}
#create some test data
mu = 8; sigma =1.5;a  = 5; b = 11; n = 100;
test.data <- data.frame(
count = c(rtruncnorm(n, a,b, mu, sigma)),
censored = 0
)
test.data$censored<- as.numeric(test.data$count<= a)
test.data$censored<- as.numeric(test.data$count>= b)
hist(test.data$count)
mean(test.data$count)
sd(test.data$count)
#find mu and sigma
x <- countdistribution.normal(test.data)
x
#create some test data
mu = 8; sigma =1.5;a  = 6; b = 10; n = 100;
test.data <- data.frame(
count = c(rtruncnorm(n, a,b, mu, sigma)),
censored = 0
)
test.data$censored<- as.numeric(test.data$count<= a)
test.data$censored<- as.numeric(test.data$count>= b)
hist(test.data$count)
mean(test.data$count)
sd(test.data$count)
#find mu and sigma
x <- countdistribution.normal(test.data)
x
#create some test data
mu = 8; sigma =2;a  = 6; b = 10; n = 100;
test.data <- data.frame(
count = c(rtruncnorm(n, a,b, mu, sigma)),
censored = 0
)
test.data$censored<- as.numeric(test.data$count<= a)
test.data$censored<- as.numeric(test.data$count>= b)
hist(test.data$count)
mean(test.data$count)
sd(test.data$count)
#find mu and sigma
x <- countdistribution.normal(test.data)
x
# meta-analysis ####
metaanalysis <- function(outputlocal,
fixed = TRUE, # fixed effect or random effect model
...){
switch(fixed,
#run fixed effect model
TRUE = 1,
#run random effect model
FALSE = 2)
}
# meta-analysis ####
metaanalysis <- function(outputlocal,
fixed = TRUE, # fixed effect or random effect model
...){
switch(fixed,
#run fixed effect model
TRUE = 1,
#run random effect model
FALSE = 2)
}
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
switch(model,
#run fixed effect model
fixed = 1,
#run random effect model
random = 2)
}
metaanalysis(list())
metaanalysis(list(), random)
metaanalysis(list(), "random")
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
switch(model,
#run fixed effect model
fixed = "Run fixed effects model";
print(9);
,
#run random effect model
random = "Run random effects model")
}
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
switch(model,
#run fixed effect model
fixed = "Run fixed effects model"
print(9)
,
#run random effect model
random = "Run random effects model")
}
metaanalysis(list())
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
switch(model,
#run fixed effect model
fixed = {"Run fixed effects model";
print(9)}
,
#run random effect model
random = "Run random effects model")
}
metaanalysis(list())
metaanalysis(list(), "random")
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
}
metaanalysis(list())
metaanalysis(list(), "random")
#load output of local algorithms ####
outputlocal<- list(out1 = data.frame(mean = c(1,2),se = c(.1,.5), n = c(10,10)),
out2 = data.frame(mean = c(1,2),se = c(.1,.5), n = c(10,10)))
outputlocal
unlist(outputlocal)
#load output of local algorithms ####
outputlocal<- list(out1 = data.frame(mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
unlist(outputlocal)
outputlocal
outputlocal[[1]]
for(i %in% outputlocal)print(i)
for(i %in% length(outputlocal))print(i)
for(i in length(outputlocal))print(i)
for(i in outputlocal)print(i)
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){
if(!is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
return(outloc)
}
metaanalysis(list())
metaanalysis(list(), "random")
metaanalysis(outputlocal)
#load output of local algorithms ####
outputlocal<- list(out1 = data.frame(mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){
if(!is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
return(outloc)
}
metaanalysis(outputlocal)
metaanalysis(list(), "random")
source("C:/Surfdrive/Projecten/SUMMERFAIR/ProjectShareSUMMERFAIR/Syntax/summer-fair/src/GlobalAlgorithm.R", echo=TRUE)
install.packages("CompQuadFrom")
install.packages("CompQuadForm")
## Now load or install&load all
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
#load output of local algorithms ####
outputlocal<- list(out1 = data.frame(mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){
if(!is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
return(outloc)
}
metaanalysis(outputlocal)
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){print(i);
if(!is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
return(outloc)
}
metaanalysis(outputlocal)
# meta-analysis ####
metaanalysis <- function(outputlocal,
model = "fixed", # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){print(i);
if(is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
switch(model,
#run fixed effect model
fixed = {print("Run fixed effects model");
print(9)}
,
#run random effect model
random = "Run random effects model")
return(outloc)
}
metaanalysis(outputlocal)
?metagen
# meta-analysis ####
metaanalysis <- function(outputlocal,
fixed = TRUE, # fixed effect or random effect model
...){
#unlist and set to one data frame of local outputs
outloc <- NULL;
for(i in outputlocal){
if(is.null(outloc)) outloc <- i else outloc<- rbind(outloc, i) }
#do the meta analysis
metaout<- metagen(TE =  outloc$mean,
seTE = outloc$se,
fixed = fixed,
random = !fixed)
return(metaout)
}
metaanalysis(outputlocal)
output <- metaanalysis(outputlocal)
forest.meta(output)
output<- metaanalysis(outputlocal, "random")
output<- metaanalysis(outputlocal, FALSE)
forest.meta(output)
rbind(out1 = data.frame(treat = c("A","B"),mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(treat = c("A","B"),mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
#load output of local algorithms ####
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
outputlocal
#do the meta analysis
metaout<- metagen(TE =  outloc$mean,
seTE = outloc$se,
fixed = TRUE)
#load output of local algorithms ####
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(3,4),se = c(1.0,1.5), n = c(10,5)))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#load output of local algorithms ####
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(1,2),se = c(.1,.5), n = c(100,50)),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(-3,4),se = c(1.0,1.5), n = c(10,5)))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
stderr(stud1)
#load output of local algorithms ####
stud1 <- rnorm(100, 1,.1)
stud2 <- rnorm(50, -1,.5)
stud3 <- rnorm(25, 1,.1)
stud4 <- rnorm(10, 1,.1)
std.error(stud1)
std.error<-function(v){sd(v)/sqrt(length(v))}
std.error(stud1)
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#load output of local algorithms ####
stud1 <- rnorm(100, 1,.1)
stud2 <- rnorm(50, -1,.5)
#load output of local algorithms ####
stud1 <- rnorm(100, 1,1)
stud2 <- rnorm(50, 1,1)
stud3 <- rnorm(25, 1,1)
stud4 <- rnorm(10, 1,1)
std.error<-function(v){sd(v)/sqrt(length(v))}
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = output,
treat = treat,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#print summary
summary(metaout)
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = output,
treat = treat,
fixed = TRUE)
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = output,
subgroup = treat,
fixed = TRUE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = output,
subgroup = treat,
fixed = FALSE)
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = output,
subgroup = treat,
fixed = FALSE)
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = outputlocal$output,
subgroup = outputlocal$treat,
fixed = FALSE)
#print summary
summary(metaout)
#load output of local algorithms ####
stud1 <- rnorm(100, 1,1)
stud2 <- rnorm(50, 1,1)
stud3 <- rnorm(5, 1,1)
stud4 <- rnorm(50, 1,1)
std.error<-function(v){sd(v)/sqrt(length(v))}
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = outputlocal$output,
subgroup = outputlocal$treat,
fixed = FALSE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
#load output of local algorithms ####
stud1 <- rnorm(100, 1,1)
stud2 <- rnorm(50, 1,1)
stud3 <- rnorm(-5, 1,1)
stud4 <- rnorm(50, 1,1)
std.error<-function(v){sd(v)/sqrt(length(v))}
stud3 <- rnorm(5, -1,1)
stud4 <- rnorm(50, 1,1)
std.error<-function(v){sd(v)/sqrt(length(v))}
outputlocal<- rbind(out1 = data.frame(output = "1",treat = c("A","B"),mean = c(mean(stud1),mean(stud2)),se = c(std.error(stud1),std.error(stud2)), n = c(length(stud1),length(stud2))),
out2 = data.frame(output = "2",treat = c("A","B"),mean = c(mean(stud3),mean(stud4)),se = c(std.error(stud3),std.error(stud4)), n = c(length(stud3),length(stud4))))
#do the meta analysis
metaout<- metagen(TE =  outputlocal$mean,
seTE = outputlocal$se,
studlab = outputlocal$output,
subgroup = outputlocal$treat,
fixed = FALSE)
#print summary
summary(metaout)
#plot forest
forest.meta(metaout)
funnel.meta(metaout)
funnel.meta(metaout,contour = c(0.9, 0.95, 0.99),)
funnel.meta(metaout,contour = c(0.9, 0.95, 0.99))
funnel.meta(metaout,studlab,contour = c(0.9, 0.95, 0.99))
funnel.meta(metaout,studlab=TRUE,contour = c(0.9, 0.95, 0.99))
outputlocal
#plot forest
forest.meta(metaout)
